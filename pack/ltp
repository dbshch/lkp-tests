#!/bin/bash

download()
{
	[ "$distro" != "centos" ] && {
		git_clone_update https://git.centos.org/r/rpms/rusers.git || return
	}
	git_clone_update https://github.com/PeterHuewe/tpm-emulator.git || return
	git_clone_update https://github.com/ianw/numactl.git || return
	git_clone_update https://github.com/linux-test-project/ltp.git
}

split_syscalls()
{
	local cmdfile="runtest/syscalls"
	[ -f "$cmdfile" ] || return 0
	# syscalls_partN file exists, abort splitting
	[ -f "${cmdfile}_part1" ] && return 0

	i=1
	n=1
	cat $cmdfile | sed -e '/^$/ d' -e 's/^[ ,\t]*//' -e '/^#/ d' | while read line
	do
		if [ $n -gt 300 ];then
			i=$(($i+1))
			n=1
		fi
		echo "$line" >> "runtest/syscalls_part${i}"
		n=$(($n+1))
	done

	echo "Splitting syscalls to syscalls_part1, ..., syscalls_part$i"
}

rearrange_dio()
{
	[ -f "dio" ] || return

	sed -e "s/^#.*//g" dio | awk '{if (length !=0) print $0}' >> diocase || return
	sed -n "1,20p" diocase >> dio-00 || return
	sed -n "21,25p" diocase >> dio-01 || return
	sed -n "26,28p" diocase >> dio-02 || return
	sed -n "29,\$p" diocase >> dio-03 || return
	rm diocase || return
}

rearrange_case()
{
	cd ./runtest || return

	# re-arrange the case dio
	rearrange_dio || return

	# re-arrange the case fs_readonly
	[ -f "fs_readonly" ] || return
	split -d -l15 fs_readonly fs_readonly- || return

	# re-arrange the case ltplite
	sed -e "s/^#.*//g" ltplite | awk '{if (length !=0) print $0}' > ltplitecase || return
	split -d -l200 ltplitecase ltplite- || return

	# re-arrange the case fs
	sed -e "s/^#.*//g" fs | awk '{if (length !=0) print $0}' > fscase || return
	split -d -l20 fscase fs- || return

	# re-arrange the case admin_tools
	split -d -l5 admin_tools admin_tools- || return

	# re-arrange the case crashme
	sed -e "s/^#.*//g" crashme | awk '{if (length !=0) print $0}' > crashmecase || return
	split -d -l2 crashmecase crashme- || return

	# re-arrange the case net_stress.appl
	grep "http4" net_stress.appl > net_stress.appl-00 || return
	grep "http6" net_stress.appl > net_stress.appl-01 || return
	grep "ftp4-download" net_stress.appl > net_stress.appl-02 || return
	grep "ftp6-download" net_stress.appl > net_stress.appl-03 || return
	cat net_stress.appl | grep -v "http[4|6]" | grep -v "ftp[4|6]-download" > net_stress.appl-04 || return

	cd ..
}

patch_source()
{
	local patch=$LKP_SRC/pack/$1
	[[ -f $patch ]] || return 0
	patch -p1 < $patch
}

rebuild()
{
	[ -d "$1" ] || return
	local build_dir=$1
	local current_dir=$(pwd)

	cd $build_dir && {
		make clean || return
		make || return
		cd $current_dir
	}
}

build_rusers()
{
	local branch=$(git branch -a | grep /c | tail -1 | awk -F/ '{print $NF}')
	git checkout "$branch" || return

	RUSERS_VERSION=$(grep ^Version: SPECS/rusers.spec | awk '{print $2}')

	local source=$(grep ^Source: SPECS/rusers.spec | awk '{print $2}')
	local url=$(echo $source | sed s/"%{version}"/${RUSERS_VERSION}/g)
	curl -k "$url" -o netkit-rusers.tar.gz

	tar zxf netkit-rusers.tar.gz

	for p in $(grep ^Patch SPECS/rusers.spec | awk '{print $2}')
	do
		echo "Patching $p ..."
		patch -f -p0 < SOURCES/$p
	done

	cd netkit-rusers-$RUSERS_VERSION
	./configure --prefix=$BM_ROOT/netkit-rusers
	cd rup
	make || return
	cd ../../
}

build_tpm_emulator()
{
	# remove Werror to use gcc-7
	sed -i "s/-Werror//g" CMakeLists.txt
	# don't build kernel module
	sed -i "s/add_subdirectory(tpmd_dev)/#add_subdirectory(tpmd_dev)/g" CMakeLists.txt
	mkdir build && cd build
	cmake ..
	make || return
	make install || return
	make package || return
	cd ..
}

build_ltp()
{
	patch_source ltp.patch || return
	patch -p1 < $LKP_SRC/pack/ltp-addon/v2-0001-shmctl-enable-subtest-SHM_LOCK-SHM_UNLOCK-only-if.patch || return
	# fix ltplite:rwtest01-04
	patch -p1 < $LKP_SRC/pack/ltp-addon/0001-Specify-TMPDIR-for-rwtest01-04.patch || return
	# delete the tmp file which may be generated by "patch -p1"
	[ -f runtest/ltplite.orig ] && rm -rf runtest/ltplite.orig
	# fix commond:ar01
	patch -p1 < $LKP_SRC/pack/ltp-addon/ar_fail.patch || return
	# fix hyperthreading:smt_smp_affinity
	patch -p1 < $LKP_SRC/pack/ltp-addon/smt_smp_affinity.patch || return

	split_syscalls
	rearrange_case || return
	make autotools
	./configure --prefix=$BM_ROOT
	make || return

	# fix rpc test cases, linking to libtirpc-dev will make the tests failed in debian
	sed -i "s/^LDLIBS/#LDLIBS/" testcases/network/rpc/rpc-tirpc/tests_pack/Makefile.inc || return
	rebuild testcases/network/rpc/rpc-tirpc/tests_pack/rpc_suite/rpc/rpc_createdestroy_svc_destroy || return
	rebuild testcases/network/rpc/rpc-tirpc/tests_pack/rpc_suite/rpc/rpc_createdestroy_svcfd_create || return
	rebuild testcases/network/rpc/rpc-tirpc/tests_pack/rpc_suite/rpc/rpc_regunreg_xprt_register || return
	rebuild testcases/network/rpc/rpc-tirpc/tests_pack/rpc_suite/rpc/rpc_regunreg_xprt_unregister
}

build_numactl()
{
	autoreconf
	./configure --prefix=$BM_ROOT/testcases/bin/numactl
	make
}

install_rusers()
{
	mkdir -p $BM_ROOT/netkit-rusers/{bin,man/man1}
	cd netkit-rusers-$RUSERS_VERSION/rup
	make install 2> /dev/null
}

install_tpm_emulator()
{
	mkdir -p $BM_ROOT/tpm-emulater
	cp build/*.zip $BM_ROOT/tpm-emulater
}

install_ltp()
{
	make install
	cp testcases/commands/tpm-tools/tpmtoken/tpmtoken_import/tpmtoken_import_openssl.cnf $BM_ROOT/testcases/bin/
	cp testcases/commands/tpm-tools/tpmtoken/tpmtoken_protect/tpmtoken_protect_data.txt  $BM_ROOT/testcases/bin/
	grep -v -w -f $LKP_SRC/pack/ltp-black-list \
	runtest/syscalls > $BM_ROOT/runtest/syscalls
}

install_numactl()
{
	make install
	ln -sf $BM_ROOT/testcases/bin/numactl/bin/numademo $BM_ROOT/testcases/bin/numademo
	ln -sf $BM_ROOT/testcases/bin/numactl/bin/memhog $BM_ROOT/testcases/bin/memhog
}

build()
{
	build_ltp || exit

	cd ../tpm-emulator || exit
	build_tpm_emulator || exit

	cd ../numactl || exit
	build_numactl || exit

	[ "$distro" != "centos" ] && {
		cd ../rusers || exit
		build_rusers || exit
	}
	return 0
}

install()
{
	cd ../ltp || exit
	install_ltp || exit

	cd ../tpm-emulator || exit
	install_tpm_emulator || exit

	cd ../numactl || exit
	install_numactl || exit

	[ "$distro" != "centos" ] && {
		cd ../rusers || exit
		install_rusers || exit
	}
	return 0
}

strip_object_files()
{
	:
}
