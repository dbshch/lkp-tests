#!/bin/bash

shopt -s nullglob

. $LKP_SRC/lib/install.sh
. $LKP_SRC/distro/common
. $LKP_SRC/lib/debug.sh

update()
{
	apt-get update
}

download()
{
	echo apt-get download $*
	apt-get download $*
}

hardlink_to_symlink()
{
	while read line
	do
		local hard_links=($line)
		for i in {1..9}
		do
			[[ ${hard_links[$i]} ]] || break
			echo \
			ln -sf ${hard_links[0]#.} ${hard_links[$i]}
			ln -sf ${hard_links[0]#.} ${hard_links[$i]}
		done
	done < <(for i in $(find . -type f -links +1); do find . -samefile $i | awk '{printf "%s ", $1}'; printf "\n"; done | sort | uniq)
}

install()
{
	local deb_pkgname
	local deb_filename
	local deb_files

	# sequence-deb content looks like:
	#   libreadline7
	#   libssl1.1
	#   gawk
	[ -s "opt/deb/sequence-deb.$BM_NAME" ] && {
		deb_files=$(find ./ -name "*.deb" -type f)
		while read -r deb_pkgname
		do
			# deb package naming specification, the file name must contain '_'
			deb_filename=$(echo "$deb_files" | grep "^\./${deb_pkgname}_")
			if [ -n "${deb_filename}" ]; then
				mv "$deb_filename"  opt/deb

				# keep-deb content looks like:
				#   libreadline7_7.0-1_amd64.deb
				#   libssl1.1_1.1.0d-2_amd64.deb
				#   gawk_1%3a4.1.3+dfsg-0.1+b1_amd64.deb
				echo $(basename $deb_filename) >> opt/deb/keep-deb.$BM_NAME
			else
				echo "error: $deb_pkgname is not exist." >&2
				return 1
			fi
		done < opt/deb/sequence-deb.$BM_NAME
	}

	local deb
	for deb in *.deb; do
		dpkg-deb -x "$deb" . || return
		rm "$deb"
	done

	hardlink_to_symlink
}

fixup_vim()
{
	ln -sf vim.basic usr/bin/vim
}

fixup_lkp-eywa()
{
	ln -sf /usr/bin/gnuplot-qt usr/bin/gnuplot
	ln -sf /usr/bin/heirloom-mailx usr/bin/mailx
}

fixup_perf()
{
	local real_perf=(usr/bin/perf_*)
	[[ $real_perf ]] || return

	# replace the perf wrapper script
	ln -sf /$real_perf usr/bin/perf
}

pack()
{
	local date=$(date +"%Y-%m-%d")

	[[ $(type -t fixup_$BM_NAME) = 'function' ]] && fixup_$BM_NAME

	{
		find . -xdev |
		grep -v -f $LKP_SRC/rootfs/rootfs-strip-list

		[[ -f $LKP_SRC/distro/$DISTRO/$BM_NAME-whitelist ]] &&
		cat   $LKP_SRC/distro/$DISTRO/$BM_NAME-whitelist
	} |
	cpio --quiet -o -H newc --owner=root.root |
	gzip -n -9 >	$pack_to/${BM_NAME}_$date.cgz	|| return

	ln -sf			 ${BM_NAME}_$date.cgz \
			$pack_to/${BM_NAME}.cgz		|| return

	chown .lkp	$pack_to/${BM_NAME}_$date.cgz \
			$pack_to/${BM_NAME}.cgz		|| return

	echo package installed to $pack_to/${BM_NAME}.cgz
}

resolve_depends()
{
	local deps=$1

	apt-get --simulate --no-install-recommends install $deps || die "Failed to apt-get install $deps"
	# apt-get will have below output
	#   Inst python-minimal [2.7.11-2] (2.7.13-2 Debian:testing, Debian:unstable [amd64])
	#   Inst mime-support (3.60 Debian:testing, Debian:unstable [all])
	#   Inst libsqlite3-0 (3.16.2-3 Debian:testing, Debian:unstable [amd64])
	# PACKAGE_LIST='python-minimal mime-support libsqlite3-0'
	PACKAGE_LIST=$(apt-get --simulate --no-install-recommends install $deps |
				awk '/^Inst / { print $2 }')

	# PACKAGE_VERSION_LIST='python-minimal=2.7.13-2 mime-support=3.60 libsqlite3-0=3.16.2-3'
	PACKAGE_VERSION_LIST=$(apt-get --simulate --no-install-recommends install $deps |
			awk '/^Inst / { if (substr($3, 1, 1) != "[") { print $2$3 } else { print $2$4 } }' | tr '(' '=')
}

save_package_deps_info()
{
	local benchmark=$1

	mkdir -p opt/deb
	touch "opt/deb/sequence-deb.$benchmark"
	touch "opt/deb/${benchmark}-deps.packages"
	# sequence-deb content looks like:
	#   libreadline7
	#   libssl1.1
	#   gawk
	[ -n "$PACKAGE_LIST" ] && \
		echo "$PACKAGE_LIST" | grep -F -f "$LKP_SRC/distro/keep-deb" >> "opt/deb/sequence-deb.$benchmark"
	[ -n "$PACKAGE_VERSION_LIST" ] && \
		echo "$PACKAGE_VERSION_LIST" >> "opt/deb/${benchmark}-deps.packages"
}

install_distro_depends()
{
	local script
	local bm="$1"
	local scripts=$(find $LKP_SRC/distro/depends/ -name "$bm" -o -name "${bm}.[0-9]")

	for script in $scripts
	do
		script=$(basename $script)
		packages=$(get_dependency_packages debian $script)

		[ -z "$packages" ] && continue

		echo install packages for $script: $packages
		LC_ALL="C" apt-get -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold install -y $packages
	done
}
