#!/bin/sh
# - test

## The LTP testsuite contains a collection of tools for
## testing the Linux kernel and related features.

cd $BENCHMARK_ROOT/ltp || exit

. $LKP_SRC/lib/env.sh
. $LKP_SRC/lib/upload.sh

export PATH=/lkp/benchmarks/ltp/bin:$PATH

check_ignored_cases()
{
	test=$1
	local ignored_by_lkp=$LKP_SRC/pack/ltp-addon/ignored_by_lkp
	cp $ignored_by_lkp ./ignored_by_lkp

	# regex match
	for regex in $(cat "$ignored_by_lkp" | grep -v '^#' | grep -w ^${test}:.*:regex$ | awk -F: 'NF == 3 {print $2}')
	do
		echo "# regex: $regex generated" >> ./ignored_by_lkp
		cat runtest/$test | awk '{print $1}' | grep -G "$regex" | awk -v prefix=$test":" '$0=prefix$0' >> ./ignored_by_lkp
	done

	orig_test=$(echo "$test" | sed 's/-[0-9]\{2\}$//')
	for i in $(cat ./ignored_by_lkp | grep -v '^#' | grep -w ^$orig_test | awk -F: 'NF == 2')
	do
		ignore=$(echo $i | awk -F: '{print $2}')
		grep -q "^${ignore}" runtest/${test} || continue
		sed -i "s/^${ignore}/#${ignore}/g" runtest/${test}
		echo "<<<test_start>>>"
		echo "tag=${ignore}"
		echo "${ignore} 0 ignored_by_lkp"
		echo "<<<test_end>>>"
	done
}

workaround_env()
{
	# some LTP sh scripts actually need bash. Fixes
	# > netns_childns.sh: 38: .: cmdlib.sh: not found
	[ "$(cmd_path bash)" = '/bin/bash' ] && [ $(readlink -e /bin/sh) != '/bin/bash' ] &&
	ln -fs bash /bin/sh

	# install mkisofs which is linked to genisoimage
	command -v mkisofs || {
		genisoimage=$(command -v genisoimage)
		if [ -n "$genisoimage" ]; then
			log_cmd ln -sf "$genisoimage" /usr/bin/mkisofs
		else
			echo "can not install mkisofs"
		fi
	}
}

specify_tmpdir()
{
	[ -z "$partitions" ] && return 1
	ltp_partition="${partitions%% *}"
	mount_point=/fs/$(basename $ltp_partition)

	mkdir -p $mount_point/tmpdir || return 1
	tmpdir_opt="-d $mount_point/tmpdir"

	return 0
}

make_configfile()
{
       [ -f "$CONFIG_FILE" ] || return
       cp $CONFIG_FILE $CONFIG_FILE.ltpback
       grep -q "default_transport = error" $CONFIG_FILE || {
           echo "default_transport = error" >> $CONFIG_FILE
           /etc/init.d/postfix reload || return
           sleep 2
           systemctl restart postfix || return
           sleep 3
       }
      
       return 0
}

recover_configfile()
{
      [ -f "$CONFIG_FILE" ] || return
      cp $CONFIG_FILE.ltpback $CONFIG_FILE
}

workaround_env

case "$test" in
admin_tools-0*)
	# set TMP=/tmp for new user
	echo "TMP=/tmp" >> /etc/skel/.profile
	# the cron.allow in debian is "/etc/cron.allow", same as redhat
	grep -q debian /etc/os-release && export MACHTYPE=x86_64-redhat-linux
	;;
cpuhotplug)
	mkdir -p /usr/src/linux/
	;;
commands)
	sed -i "/#/d" /etc/shells
	sed -i "/\[Unit\]/a\StartLimitIntervalSec=0" /lib/systemd/system/sssd.service
	systemctl daemon-reload || exit
	systemctl restart sssd || exit
	[ -f "/etc/nscd.conf" ] && {
		# using sssd and nscd both can result in unexpected behavior, disable some configs here
		a=$(cat /etc/nscd.conf | grep -n "enable-cache.*passwd" | cut -d: -f1)
		b=$(cat /etc/nscd.conf | grep -n "enable-cache.*group" | cut -d: -f1)
		c=$(cat /etc/nscd.conf | grep -n "enable-cache.*netgroup" | cut -d: -f1)
		for line in $a $b $c
		do
			sed -i "$line s/yes/no/" /etc/nscd.conf
		done
		systemctl restart nscd || exit
	}
        CONFIG_FILE="/etc/postfix/main.cf"
        make_configfile || exit
        ;;
fs_readonly-0*)
	[ -z "$fs" ] && exit
	[ -z "$partitions" ] && exit
	big_dev="${partitions%% *}"
	umount $big_dev
	big_dev_opt="-Z $fs -z $big_dev"
	;;
fs_ext4)
	[ -z "$partitions" ] && exit
	big_dev="${partitions%% *}"
	big_dev_opt="-z $big_dev"
	;;
tpm_tools)
	[ $USER ] || USER=root
	rm -rf /var/lib/opencryptoki/tpm/$USER
	cd tpm-emulater
	find . -maxdepth 1 -type d -name "TPM_Emulator*" -exec rm -rf {} \;
	unzip $(ls TPM_Emulator*.zip | head -1)
	rsync -av $(ls -l . | awk '/^d/ {print $NF}' | head -1)"/" /
	cd ..
	killall tpmd > /dev/null 2>&1
	tpmd -f -d clear > /dev/null 2>&1 &
	killall tcsd > /dev/null 2>&1
	tcsd -e -f > /dev/null 2>&1 &
	sleep 5
	export LTPROOT=${PWD}
	export LTPBIN=$LTPROOT/testcases/bin
	export OWN_PWD="HELLO1"
	export NEW_OWN_PWD="HELLO2"
	export SRK_PWD="HELLO3"
	export NEW_SRK_PWD="HELLO4"
	export P11_SO_PWD="HELLO5"
	export NEW_P11_SO_PWD="HELLO6"
	export P11_USER_PWD="HELLO7"
	export NEW_P11_USER_PWD="HELLO8"
	;;
ltp-aiodio.part[24]|syscalls_part[13]|dio-0*)
	specify_tmpdir || exit
	;;
syscalls_part2)
	specify_tmpdir || exit
	relatime=$(mount | grep /tmp | grep relatime)
	noatime=$(mount | grep /tmp | grep noatime)
	if [ "$relatime" != "" ] || [ "$noatime" != "" ]; then
		mount -o remount,strictatime /tmp
	fi
	;;
syscalls_part4)
	specify_tmpdir || exit
	echo "#\$SystemLogSocketName /run/systemd/journal/syslog" > /etc/rsyslog.d/listen.conf
	systemctl restart rsyslog || exit
	[ -f /var/log/maillog ] || {
		touch /var/log/maillog && chmod 600 /var/log/maillog
	}
	[ -e /dev/log ] && rm /dev/log
	ln -s /run/systemd/journal/dev-log /dev/log
	;;
ltplite-0*)
	specify_tmpdir || exit
	[ "$fs" = "ext4" ] && tune2fs -O ^dir_nlink $ltp_partition
	;;
net.ipv6_lib)
	iface=$(ifconfig -s | awk '{print $1}' | grep ^eth | head -1)
	[ -n "$iface" ] && export LHOST_IFACES=$iface
	sed -i "1s/^/::1 ${HOSTNAME}\n/" /etc/hosts
	sed -i "1s/^/127.0.0.1 ${HOSTNAME}\n/" /etc/hosts
	;;
net.rpc)
	systemctl start openbsd-inetd || exit
	cp netkit-rusers/bin/rup /usr/bin/
	;;
net_stress.appl)
        [ -d /srv/ftp ] && export FTP_DOWNLOAD_DIR=/srv/ftp
        sed -i '/\/usr\/sbin\/named {/a\\/tmp\/** rw,' /etc/apparmor.d/usr.sbin.named || exit
        systemctl start bind9 || exit
        systemctl list-units | grep -wq apparmor.service && (systemctl reload-or-restart apparmor || exit)
        ;;
esac

check_ignored_cases $test
log_cmd ./runltp -f $test $big_dev_opt $tmpdir_opt || exit

exit_value=$?

[ "$test" = "commands" ] && {
     recover_configfile || exit
}

[ "$test" = "syscalls_part2" ] && {
	[ "$relatime" != "" ] && mount -o remount,relatime /tmp
	[ "$noatime" != "" ] && mount -o remount,noatime /tmp
}

upload_files -t results $BENCHMARK_ROOT/ltp/results/* \
	$BENCHMARK_ROOT/ltp/output

exit $exit_value
